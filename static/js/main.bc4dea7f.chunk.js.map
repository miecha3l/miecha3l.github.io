{"version":3,"sources":["posts sync nonrecursive /.md$","posts/project_manager.md","components/Nav.js","components/About.js","pages/Homepage.js","components/PostsList.js","pages/PostsListPage.js","pages/PostPage.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","NavBar","className","to","AboutSection","HomePage","Nav","About","posts","PostsList","postList","p","path","replace","key","PostsListPage","PostPage","props","state","match","params","allPosts","r","importAll","require","postHeader","find","title","postFile","split","fetch","then","res","text","postContent","this","setState","source","React","Component","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc4dea7f.chunk.js","sourcesContent":["var map = {\n\t\"./project_manager.md\": 136\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 135;","module.exports = __webpack_public_path__ + \"static/media/project_manager.40263503.md\";","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport '../App.css'\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <nav className=\"app-nav\">\r\n            <Link className=\"nav-link\" to=\"/\">\r\n                <h3>SimpleDev</h3>\r\n            </Link>\r\n            <div className=\"nav-links-container\">\r\n                <Link className=\"nav-link\" to=\"/posts\">Posts</Link>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react'\r\nimport '../App.css'\r\n\r\nconst AboutSection = () => {\r\n    return (\r\n        <div className=\"about-section-container\">\r\n            <p>\r\n                Hi there, my name is Micha≈Ç. I'm software developer coding mainly in python & ASP.NET\r\n            </p>\r\n            <p>\r\n                This is a place where I post stuff about my projects whenever I feel like it :)\r\n            </p>\r\n            <p>\r\n                Have a nice reading! :)\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AboutSection;","import React from 'react'\r\nimport '../App.css'\r\nimport NavBar from '../components/Nav'\r\nimport AboutSection from '../components/About'\r\n\r\nconst HomePage = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar />\r\n            <AboutSection />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport '../App.css'\r\n\r\nexport const posts = [\r\n    {\r\n        'title': 'Idea behind my project manager',\r\n        'file': 'project_manager.md',\r\n        'index': 1\r\n    }\r\n];\r\n\r\nconst PostsList = () => {\r\n    \r\n    const postList = posts.map(p => {\r\n        let path='posts/' + p['title'].replace(' ', '+');\r\n        return <li key={p['index']}><Link className=\"post-list-link\" to={path}>{p['title']}</Link></li>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>Posts</h1>\r\n            <ul className=\"post-list\">{postList}</ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostsList;","import React from 'react'\r\nimport '../App.css'\r\nimport NavBar from '../components/Nav'\r\nimport PostsList from '../components/PostsList'\r\n\r\nconst PostsListPage = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <NavBar />\r\n            <PostsList />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostsListPage;","import React from 'react'\r\nimport '../App.css'\r\nimport NavBar from '../components/Nav'\r\nimport {posts} from '../components/PostsList'\r\nimport ReactMarkdown from 'react-markdown';\r\n\r\nclass PostPage extends React.Component { \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            'title': props.match.params['title']\r\n        };\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const importAll = (r) => r.keys().map(r);\r\n        const allPosts = importAll(require.context('../posts', false, /\\.md$/))\r\n\r\n        const postHeader = posts.find(p => p['title'].replace(' ', '+') === this.state.title);\r\n        \r\n        let postFile = allPosts.find(p => {\r\n            let fileTitle = p.split('/')[3].split('.')[0] + '.md';\r\n            if(fileTitle === postHeader['file']) return p;\r\n        });\r\n\r\n        let postContent = await fetch(postFile).then(res => res.text());\r\n        this.setState(state => ({...state, postContent}));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n                <NavBar />\r\n                <div className=\"post-container\">\r\n                    <ReactMarkdown source={this.state.postContent} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport HomePage from './pages/Homepage'\nimport PostsListPage from './pages/PostsListPage'\nimport PostPage from './pages/PostPage';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/posts\" component={PostsListPage}/>\n        <Route exact path=\"/posts/:title\" component={PostPage}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}